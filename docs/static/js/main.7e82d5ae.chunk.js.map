{"version":3,"sources":["Coverage.js","Comparison.js","Plan.js","App.js","serviceWorker.js","index.js"],"names":["Coverage","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","minimum","fields","premium","parseInt","value","Number","isInteger","hsa","surcharge","deductible","hra","pocketMax","_this2","props","calculateMinimum","maxedDecuctible","calculateMaxDeductible","calculateOutPocketMaximum","react_default","a","createElement","className","react_editable_label_dist_default","initialValue","coverageTitle","save","saveTitle","id","formId","onChange","e","select","concat","type","for","onSubmit","keys","map","field","name","updateField","Component","Comparison","title","maximum","Plan","blankCoverage","positive","compare","planTitle","coverages","coverage_0","comparisons","bind","assertThisInitialized","addCoverage","addToCompare","update","defineProperty","$set","setState","reduce","acc","curr","console","log","min","max","$push","$apply","x","nextIndex","length","$merge","coverageId","preventDefault","target","match","_this3","onClick","coverage","Coverage_Coverage","comparison","Comparison_Comparison","App","Plan_Plan","Boolean","window","location","hostname","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.7e82d5ae.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport Editable from 'react-editable-label';\nimport './Coverage.css' \n\nexport default class Coverage extends Component {\n    constructor() {\n        super()\n        this.state = {\n            minimum: 0\n        }\n    }\n    calculateMinimum(fields) {\n        let premium = parseInt(fields.premium.value)\n        premium = Number.isInteger(premium) ?  premium : 0\n        let hsa = parseInt(fields.hsa.value)\n        hsa = Number.isInteger(hsa) ?  hsa : 0\n        let surcharge = parseInt(fields.surcharge.value)\n        surcharge = Number.isInteger(surcharge) ? surcharge : 0\n        return premium + surcharge - hsa\n    }\n    calculateMaxDeductible(fields) {\n        let premium = parseInt(fields.premium.value)\n        premium = Number.isInteger(premium) ?  premium : 0\n        let deductible = parseInt(fields.deductible.value)\n        deductible = Number.isInteger(deductible) ? deductible : 0\n        let hra = parseInt(fields.hra.value)\n        hra = Number.isInteger(hra) ?  hra : 0\n        let hsa = parseInt(fields.hsa.value)\n        hsa = Number.isInteger(hsa) ?  hsa : 0\n        let surcharge = parseInt(fields.surcharge.value)\n        surcharge = Number.isInteger(surcharge) ? surcharge : 0\n        return premium + deductible + surcharge - hra - hsa\n    }\n    calculateOutPocketMaximum(fields) {\n        let premium = parseInt(fields.premium.value)\n        premium = Number.isInteger(premium) ?  premium : 0\n        let pocketMax = parseInt(fields.pocketMax.value)\n        pocketMax = Number.isInteger(pocketMax) ? pocketMax : 0\n        let hra = parseInt(fields.hra.value)\n        hra = Number.isInteger(hra) ?  hra : 0\n        let hsa = parseInt(fields.hsa.value)\n        hsa = Number.isInteger(hsa) ?  hsa : 0\n        let surcharge = parseInt(fields.surcharge.value)\n        surcharge = Number.isInteger(surcharge) ? surcharge : 0\n        return premium + pocketMax + surcharge - hra - hsa\n    }\n\n    render() {\n        const fields = this.props.fields\n        const minimum = this.calculateMinimum(fields)\n        const maxedDecuctible = this.calculateMaxDeductible(fields)\n        const pocketMax = this.calculateOutPocketMaximum(fields)\n\n        return (\n            <div className='Coverage'>\n                <h2>\n                    <Editable initialValue={this.props.coverageTitle} save={value => this.props.saveTitle({value, id:this.props.formId})}/>\n                </h2>\n                <input onChange={(e) => this.props.select(e, this.props.formId)} id={`${this.props.formId}-compare`} type=\"checkbox\" />\n                <label for={`${this.props.formId}-compare`}>Select for Comparison</label>\n                <form onSubmit={(e) => this.props.select(e, this.props.formId)}>\n                <p>All values should be entered as whole number for the entire year. NO COMMAS, DOLLAR SIGNS OR OTHER NON-NUMERICS</p>\n                {Object.keys(fields).map( (field) => {\n                    const id = this.props.formId + '_' + field\n\n                    return (\n                        <div>\n                            <label for={id}>{fields[field].name}</label>\n                            <input \n                            id={id} \n                            onChange={(e) => this.props.updateField(e, field, this.props.formId)}\n                            value={fields[field].value}></input>\n                        </div>\n                    )\n                })}\n                <div>\n                    <h3>Minimum Usage Cost: ${minimum}</h3>\n                    <p>Premium + Surchare - HSA. This represents a year in which the insurance is unused. No additional costs over whatever might be fully covered.</p>\n                    <div className='dim'><h3>Maxed Deductible Cost: ${maxedDecuctible}</h3>\n                        <p>Premium + Surcharge + Deductible - HSA - HRA. This represents a year in which the expenses reach exactly to the deductible. This is not a good way to compare plans because reaching the deductible on different plans representes much differnt health care spending.</p>\n                    </div>\n                    <h3>Out of Pocket Max: ${pocketMax}</h3>\n                    <p>Premium + Surcharge + Out of Pocket Maximum - HSA - HRA. This represents a year in which expenses reach the Out of Pocket Maxium.</p>\n                </div>\n                {/* @todo: ability to add field <button>Add field</button> */}\n            </form>\n            </div>\n        )\n    }\n}","import React, {Component} from 'react'\n\nexport default class Comparison extends Component {\n\n    render() {\n        return (\n            <li>\n                <h4>{this.props.title}</h4>\n                <p>Min: {this.props.minimum}</p>\n                <p>Max: {this.props.maximum}</p>\n                {/* <button className='close' onClick={(this.props.index) => this.props.clear(this.props.index)}>x</button> */}\n            </li>\n        )\n    }\n}\n","import React, { Component } from 'react';\nimport update from 'immutability-helper';\n\nimport Coverage from './Coverage.js';\nimport Comparison from './Comparison.js'\nimport './Plan.css'\n\nexport default class Plan extends Component {\n    constructor() {\n        super();\n        this.blankCoverage = {\n            coverageTitle: 'Coverage Title',\n            fields: {\n                premium: {name: 'Yearly Premium', value: '', positive: true},\n                deductible: {name: 'Deductible', value: '', positive: true},\n                pocketMax: {name: 'Out of pocket maximum', value: '', positive: true},\n                hsa: {name: 'Health Savings Account', value: '', positive: false},\n                hra: {name: 'Health Reimbursment Account', value: '', positive: false},\n                surcharge: {name: 'Surcharge', value: '', positive: true}\n            },\n            compare: false,\n        }\n        this.state = {\n            planTitle: 'Coverage Plans',\n            coverages: {\n                coverage_0 : this.blankCoverage\n            },\n            comparisons: []\n        }\n\n        this.updateField = this.updateField.bind(this)\n        this.addCoverage = this.addCoverage.bind(this)\n        this.select = this.select.bind(this)\n        this.addToCompare = this.addToCompare.bind(this)\n        this.saveTitle = this.saveTitle.bind(this)\n    }\n    saveTitle(title) {\n        const coverages = update(this.state.coverages, {[title.id]: {coverageTitle: {$set: title.value}}})\n        this.setState({ coverages })\n    }\n    // This definitely shouldn't be in two places\n    calculateMinimum(fields) {\n        let premium = parseInt(fields.premium.value)\n        premium = Number.isInteger(premium) ?  premium : 0\n        let hsa = parseInt(fields.hsa.value)\n        hsa = Number.isInteger(hsa) ?  hsa : 0\n        let surcharge = parseInt(fields.surcharge.value)\n        surcharge = Number.isInteger(surcharge) ? surcharge : 0\n        return premium + surcharge - hsa\n    }\n    calculateOutPocketMaximum(fields) {\n        let premium = parseInt(fields.premium.value)\n        premium = Number.isInteger(premium) ?  premium : 0\n        let pocketMax = parseInt(fields.pocketMax.value)\n        pocketMax = Number.isInteger(pocketMax) ? pocketMax : 0\n        let hra = parseInt(fields.hra.value)\n        hra = Number.isInteger(hra) ?  hra : 0\n        let hsa = parseInt(fields.hsa.value)\n        hsa = Number.isInteger(hsa) ?  hsa : 0\n        let surcharge = parseInt(fields.surcharge.value)\n        surcharge = Number.isInteger(surcharge) ? surcharge : 0\n        return premium + pocketMax + surcharge - hra - hsa\n    }\n\n    addToCompare() {\n        const coverages = this.state.coverages\n        const compare = Object.keys(coverages)\n            .reduce((acc, curr) => {\n                console.log(acc)\n                if (coverages[curr].compare) {\n                    const min = this.calculateMinimum(coverages[curr].fields)\n                    const max = this.calculateOutPocketMaximum(coverages[curr].fields)\n                    if ('title' in acc) {\n                        acc.title = `${acc.title} & ${coverages[curr].coverageTitle}`\n                        acc.minimum = acc.minimum + min\n                        acc.maximum = acc.maximum + max\n                    }\n                    else {\n                        acc.title = coverages[curr].coverageTitle\n                        acc.minimum = min\n                        acc.maximum = max\n                    }\n                    \n                    // return acc\n                }\n                return acc\n                \n            }, {})\n        const comparisons = update(this.state.comparisons, {$push: [compare]});\n        this.setState({comparisons })\n    }\n\n    select(e, id) {\n        const coverages = update(this.state.coverages, { [id]: { compare : { $apply: (x)=> !x }}})\n        this.setState({ coverages })\n    }\n\n    addCoverage() {\n        const nextIndex = Object.keys(this.state.coverages).length\n        const coverages = update(this.state.coverages, {$merge:  {[`coverage_${nextIndex}`]: this.blankCoverage} })\n        this.setState({ coverages })\n    }\n\n    updateField(e, field, coverageId) {\n        e.preventDefault();\n        const value = e.target.value\n        if (!value.match(/[0-9]*/)) {\n            console.log(value)\n            return;\n        }\n        const coverages = update(this.state.coverages, {\n            [coverageId]: {fields: {[field]: {value: {$set:value}}}}\n        })\n        this.setState({coverages})\n    }\n\n    render() {\n        const coverages = this.state.coverages;\n        return (\n            <div>\n                <div className='Plan'>\n                    <h1>{this.state.planTitle}</h1>\n                    <button onClick={this.addToCompare}>Add Selected to Comparison <span className='icon icon-arrow'>→</span></button>\n                    <ul>\n                        {Object.keys(this.state.coverages).map( \n                            (coverage) => <Coverage \n                                updateField={this.updateField}\n                                coverageTitle={coverages[coverage].coverageTitle}\n                                fields={coverages[coverage].fields}\n                                formId={coverage}\n                                select={this.select}\n                                saveTitle={this.saveTitle}\n                                />\n                        )}\n                    </ul>\n                    <button onClick={this.addCoverage}><span className='icon icon-plus'>+</span> Add Coverage</button>\n                </div>\n                <div className='Comparisons'>\n                    <ul>\n                        {Object.keys(this.state.comparisons).map(comparison => {\n                            console.log(comparison)\n                            return (\n                                <Comparison \n                                title={this.state.comparisons[comparison].title}\n                                minimum={this.state.comparisons[comparison].minimum}\n                                maximum={this.state.comparisons[comparison].maximum}\n                                />\n                            )\n                        })}\n                    </ul>\n                </div>\n            </div>  \n        )\n    }\n}","import React, { Component } from 'react';\nimport Plan from './Plan.js'\nimport './App.css'\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <Plan />\n        {/* <button>+ Add a plan</button> */}\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}